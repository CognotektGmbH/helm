apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "gitlab-runner.fullname" . }}
  labels:
    app: {{ include "gitlab-runner.fullname" . }}
    chart: {{ include "gitlab-runner.chart" . }}
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
data:
  entrypoint: |
    #!/bin/bash
    set -e
    mkdir -p /home/gitlab-runner/.gitlab-runner/
    cp /scripts/config.toml /home/gitlab-runner/.gitlab-runner/

    # Register the runner
    if [[ -f /secrets/accesskey && -f /secrets/secretkey ]]; then
      export CACHE_S3_ACCESS_KEY=$(cat /secrets/accesskey)
      export CACHE_S3_SECRET_KEY=$(cat /secrets/secretkey)
    fi

    if [[ -f /secrets/gcs-applicaton-credentials-file ]]; then
      export GOOGLE_APPLICATION_CREDENTIALS="/secrets/gcs-applicaton-credentials-file"
    else
      if [[ -f /secrets/gcs-access-id && -f /secrets/gcs-private-key ]]; then
        export CACHE_GCS_ACCESS_ID=$(cat /secrets/gcs-access-id)
        # echo -e used to make private key multiline (in google json auth key private key is oneline with \n)
        export CACHE_GCS_PRIVATE_KEY=$(echo -e $(cat /secrets/gcs-private-key))
      fi
    fi

    if [[ -f /secrets/runner-registration-token ]]; then
      export REGISTRATION_TOKEN=$(cat /secrets/runner-registration-token)
    fi

    if [[ -f /secrets/runner-token ]]; then
      export CI_SERVER_TOKEN=$(cat /secrets/runner-token)
    fi

    if ! sh /scripts/register-the-runner; then
      exit 1
    fi

    # Run pre-entrypoint custom commands
    if ! sh /scripts/custom-commands; then
      exit 1
    fi

    # Start the runner
    /entrypoint run --user=gitlab-runner \
      --working-directory=/home/gitlab-runner

  config.toml: |
    concurrent = {{ .Values.concurrent }}
    check_interval = {{ .Values.checkInterval }}
    log_level = {{ default "info" .Values.logLevel | quote }}
    {{- if .Values.metrics.enabled }}
    listen_address = '[::]:9252'
    {{- end }}
  configure: |
    set -e
    cp /init-secrets/* /secrets
  register-the-runner: |
    #!/bin/bash
    MAX_REGISTER_ATTEMPTS=30

    for i in $(seq 1 "${MAX_REGISTER_ATTEMPTS}"); do
      echo "Registration attempt ${i} of ${MAX_REGISTER_ATTEMPTS}"

      /entrypoint register \
        {{- if and .Values.runners.machine.ec2.accessKey .Values.runners.machine.ec2.secretKey }}
        --machine-machine-options "amazonec2-access-key={{ .Values.runners.machine.ec2.accessKey }}" \
        --machine-machine-options "amazonec2-secret-key={{ .Values.runners.machine.ec2.secretKey }}" \
        {{- end }}
        --machine-machine-options "amazonec2-ami={{ .Values.runners.machine.ec2.ami }}" \
        --machine-machine-options "amazonec2-block-duration-minutes={{ .Values.runners.machine.ec2.blockDurationMinutes }}" \
        --machine-machine-options "amazonec2-device-name={{ .Values.runners.machine.ec2.deviceName }}" \
        --machine-machine-options "amazonec2-iam-instance-profile={{ .Values.runners.machine.ec2.iamInstanceProfile }}" \
        --machine-machine-options "amazonec2-instance-type={{ .Values.runners.machine.ec2.instanceType }}" \
        --machine-machine-options "amazonec2-region={{ .Values.runners.machine.ec2.region }}" \
        --machine-machine-options "amazonec2-request-spot-instance={{ .Values.runners.machine.ec2.requestSpotInstance }}" \
        --machine-machine-options "amazonec2-root-size={{ .Values.runners.machine.ec2.rootSize }}" \
        --machine-machine-options "amazonec2-security-group={{ .Values.runners.machine.ec2.securityGroup }}" \
        --machine-machine-options "amazonec2-spot-price={{ .Values.runners.machine.ec2.spotPrice }}" \
        --machine-machine-options "amazonec2-ssh-user={{ .Values.runners.machine.ec2.sshUser }}" \
        --machine-machine-options "amazonec2-subnet-id={{ .Values.runners.machine.ec2.subnetId }}" \
        --machine-machine-options "amazonec2-tags={{ .Values.runners.machine.ec2.tags }}" \
        --machine-machine-options "amazonec2-vpc-id={{ .Values.runners.machine.ec2.vpcId }}" \
        {{- range .Values.runners.machine.engineInsecureRegistry }}
        --machine-machine-options "engine-insecure-registry={{ . }}" \
        {{- end }}
        {{- range .Values.runners.machine.engineOpt }}
        --machine-machine-options "engine-opt={{ . }}" \
        {{- end }}
        --machine-machine-options "amazonec2-zone={{ .Values.runners.machine.ec2.zone }}" \
        --machine-machine-options "amazonec2-private-address-only={{ .Values.runners.machine.ec2.privateAddressOnly }}" \
        --machine-machine-options "amazonec2-use-private-address={{ .Values.runners.machine.ec2.usePrivateAddress }}" \
        --non-interactive

      retval=$?

      if [ ${retval} = 0 ]; then
        break
      elif [ ${i} = ${MAX_REGISTER_ATTEMPTS} ]; then
        exit 1
      fi

      sleep 5
    done

    exit 0

  check-live: |
    #!/bin/bash
    if /usr/bin/pgrep -f .*register-the-runner; then
      exit 0
    elif /usr/bin/pgrep gitlab.*runner; then
      exit 0
    else
      exit 1
    fi

  custom-commands: |
    #!/bin/bash
    {{- range .Values.preEntrypointCommands }}
    {{ . }}
    {{- end }}
